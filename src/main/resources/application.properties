#postgres
spring.jpa.database=POSTGRESQL
spring.datasource.url=${DB_URL:jdbc:postgresql://postgres:5432/postgres}
spring.datasource.username=postgres
spring.datasource.password=password

# swagger-ui
springdoc.swagger-ui.enabled=true
springdoc.swagger-ui.path=/swagger.html

#Turn Statistics on and log SQL stmts
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=true

#If want to see very extensive logging
spring.jpa.properties.hibernate.generate_statistics=true
logging.level.root=WARN
logging.level.org.apache.kafka=INFO
logging.level.com.example=DEBUG
#logging.level.org.hibernate.type=trace
#logging.level.org.hibernate.stat=debug

#Schema will be created using schema.sql and data.sql files
spring.jpa.hibernate.ddl-auto=update



#spring-kafka https://kafka.apache.org/documentation/#producerconfigs
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.producer.key-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.producer.bootstrap-servers=broker01:9091,broker02:9092,broker03:9093
spring.kafka.producer.retries=10
#set value due to use producer transaction
spring.kafka.producer.transaction-id-prefix=tx-${app.container-name}
spring.kafka.producer.transaction-timeout-ms=600000

#spring-kafka https://kafka.apache.org/documentation/#consumerconfigs
spring.kafka.consumer.bootstrap-servers=${spring.kafka.producer.bootstrap-servers}
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
spring.kafka.consumer.properties.spring.json.trusted.packages=*
spring.kafka.properties.spring.deserializer.value.delegate.class=org.springframework.kafka.support.serializer.JsonDeserializer

spring.kafka.consumer.auto-offset-reset=earliest
# app
app.is-fail-consumer=false
app.container-name=containername
app.topic-partitions=32
app.topic-replacas=2
app.bootstrap-servers=${spring.kafka.producer.bootstrap-servers}

